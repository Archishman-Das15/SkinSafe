from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
import os
from werkzeug.utils import secure_filename
import tensorflow as tf
from PIL import Image
import numpy as np

# Initialize Flask app
app = Flask(__name__)

# Configuration settings
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///telederm.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = 'uploads/'
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}

# Initialize the database and migrations
db = SQLAlchemy(app)
migrate = Migrate(app, db)

# Load the trained CNN model
model = tf.keras.models.load_model('your_model.h5')  # Replace with your actual model path

# List of classes (adjust according to your model)
class_names = ["Class1", "Class2", "Class3"]  # Replace with your actual class names

# Define the PatientRecord model for SQLAlchemy
class PatientRecord(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    age = db.Column(db.Integer, nullable=False)
    diagnosis = db.Column(db.String(200), nullable=False)
    image_path = db.Column(db.String(200), nullable=True)

def allowed_file(filename):
    """Check if the file has a valid image extension."""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def preprocess_image(image_path):
    """Preprocess the image to match model input size and normalization."""
    img = Image.open(image_path).resize((224, 224))  # Adjust size based on your model's input
    img = np.array(img) / 255.0  # Normalize image
    img = np.expand_dims(img, axis=0)
    return img

@app.route("/patients", methods=["POST"])
def add_patient():
    """Add a new patient record to the database."""
    try:
        data = request.json
        if not all(k in data for k in ["name", "age", "diagnosis"]):
            return jsonify({"error": "Missing required fields"}), 400
        if not isinstance(data["age"], int) or data["age"] <= 0:
            return jsonify({"error": "Age must be a positive integer"}), 400

        new_patient = PatientRecord(name=data["name"], age=data["age"], diagnosis=data["diagnosis"])
        db.session.add(new_patient)
        db.session.commit()

        return jsonify({"message": "Patient added successfully", "id": new_patient.id}), 201
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/patients/<int:id>/upload", methods=["POST"])
def upload_image(id):
    """Upload an image for a specific patient and run diagnosis using the CNN model."""
    patient = PatientRecord.query.get(id)
    if not patient:
        return jsonify({"error": "Patient not found"}), 404

    if 'file' not in request.files:
        return jsonify({"error": "No file uploaded"}), 400

    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400

    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)
        
        # Update the patient's record with the uploaded image path
        patient.image_path = file_path
        db.session.commit()

        # Call CNN model for diagnosis
        img = preprocess_image(file_path)
        prediction = model.predict(img)
        class_idx = np.argmax(prediction[0])  # Get the index of the highest probability
        predicted_class = class_names[class_idx]
        confidence = prediction[0][class_idx]  # Get the confidence score of the prediction

        # Return the diagnosis (prediction result)
        return jsonify({
            "message": "Image uploaded successfully",
            "diagnosis": predicted_class,
            "confidence": float(confidence)
        }), 200

    return jsonify({"error": "Invalid file type"}), 400

if __name__ == "__main__":
    app.run(debug=True)
